---
swagger: "2.0"
info:
  description: "This is a sample server.  You can find out more about     Swagger\
    \ at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/)."
  version: "1.0.0"
  title: "Swagger API Example"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api4swagger.eu-gb.cf.appdomain.cloud"
basePath: "/v2"
tags:
- name: "register"
  description: "Operations about time register"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /register:
    post:
      tags:
      - "register"
      summary: "Create register"
      operationId: "createRegister"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created register object"
        required: true
        schema:
          $ref: "#/definitions/Register"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "Register"
  /register/{id}:
    get:
      tags:
      - "register"
      summary: "Get register by id"
      description: ""
      operationId: "getRegisterById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched. Use 100 for testing. "
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Register"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Id not found"
      x-swagger-router-controller: "Register"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can be done by anyone."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
      phone:
        type: "string"
      address:
        type: "string"
      pc:
        type: "integer"
        format: "int32"
      city:
        type: "string"
      country:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      country: "country"
      password: "password"
      address: "address"
      pc: 6
      userStatus: 1
      phone: "phone"
      city: "city"
      id: 0
      email: "email"
      username: "username"
  Register:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      idUsu:
        $ref: "#/definitions/User/properties/id"
      regDate:
        type: "string"
        format: "date-time"
      inOut:
        type: "boolean"
        default: false
    xml:
      name: "Register"
    example:
      inOut: false
      regDate: "2000-01-23T04:56:07.000+00:00"
      idUsu: ""
      id: 0
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
